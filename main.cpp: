#include <iostream>
#include <cstdlib>
#include <string>
#include <ctime>
using namespace std;

// Function prototypes
void printBothBoards(char board1[10][10], char board2[10][10]);

// Prints both boards side by side
void printBothBoards(char board1[10][10], char board2[10][10]) {
    // Print column numbers for both boards
    cout << "\t  Player 1\t\t\t  Player 2\n";
    for (int i = 0; i < 1; i++) {
        cout << "\t  ";
        for (int j = 0; j < 10; j++) {
            cout << j << " ";
        }
        cout << "\t\t  ";
        for (int j = 0; j < 10; j++) {
            cout << j << " ";
        }
        cout << "\n";
    }

    // Print both boards row by row
    for (int i = 0; i < 10; i++) {
        cout << "\t" << i << " ";
        for (int j = 0; j < 10; j++) {
            cout << board1[i][j] << " ";
        }
        cout << "\t\t" << i << " ";
        for (int j = 0; j < 10; j++) {
            cout << board2[i][j] << " ";
        }
        cout << "\n";
    }
}

int main() {
    // Player 1's board
    char num1[10][10];
    // Player 2's board
    char num2[10][10];

    // Declaring variables
    int bomb = 0;
    int shoot = 0;
    int all = 0;
    int x, y;
    int size;
    char direction;
    int test = 0;
    int restart = 0;
    char menu;
    int count1 = 0, count2 = 0;
    bool isPlayer1Turn = true;

    // Create blank boards for Player 1 and 2
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            num1[i][j] = '-';
            num2[i][j] = '-';
        }
    }

    printBothBoards(num1, num2);

    // Menu function for the whole game
    while (menu != 'q') {
        cout << "\nType (a) to add new ship, (b) to see the boards, (p) to play or (q) to quit:\n";
        cin >> menu;

        if (menu == 'a') {
            char playerChoice;
            cout << "Add ship for Player 1 or Player 2? (1/2): ";
            cin >> playerChoice;
            char (*currentBoard)[10] = (playerChoice == '1') ? num1 : num2;
            int &currentCount = (playerChoice == '1') ? count1 : count2;

            restart = 0;
            test = 0;
            size = 0;

            while (restart != 1) {
                cout << "Please choose how big your ship will be (please note can not be less than 3 or greater than 5): \n";
                cin >> size;
                while (size > 5 || size < 3) {
                    cout << "Ship size does not exist, please try again\n";
                    cout << "Please choose how big your ship will be (please note can not be less than 3 or greater than 5): \n";
                    cin >> size;
                }

                cout << "Please choose your X location for your ship: \n";
                cin >> x;

                cout << "Please choose your Y location for your ship: \n";
                cin >> y;

                // Check for overlap
                while (currentBoard[x][y] == 'B') {
                    cout << "Error: X and Y values need to be changed. Ship already present at this location.\n";
                    cout << "Please choose your X location for your ship: \n";
                    cin >> x;
                    cout << "Please choose your Y location for your ship: \n";
                    cin >> y;
                }

                cout << "Please choose the direction your ship will go in - vertical(v) or horizontal(h): \n";
                cin >> direction;

                // Validate direction input
                while (direction != 'v' && direction != 'h') {
                    cout << "Invalid direction. Please choose vertical(v) or horizontal(h): \n";
                    cin >> direction;
                }

                // Test for valid ship placement
                if (direction == 'h' && (y + size) > 10) {
                    cout << "Error: Ship goes out of bounds. Please choose different coordinates or direction.\n";
                    continue;
                } else if (direction == 'v' && (x + size) > 10) {
                    cout << "Error: Ship goes out of bounds. Please choose different coordinates or direction.\n";
                    continue;
                }

                // Place the ship
                for (int i = 0; i < size; i++) {
                    if (direction == 'h') {
                        currentBoard[x][y + i] = 'B';
                    } else if (direction == 'v') {
                        currentBoard[x + i][y] = 'B';
                    }
                }
                currentCount += size;
                restart = 1;
            }
        }

        // Print both boards if menu equals 'b'
        if (menu == 'b') {
            cout << "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n";
            printBothBoards(num1, num2);
        }

        // Begins the play function of the game
        if (menu == 'p') {
            while (count1 > 0 && count2 > 0) {
                char (*currentBoard)[10] = isPlayer1Turn ? num2 : num1;
                int &currentCount = isPlayer1Turn ? count2 : count1;
                cout << (isPlayer1Turn ? "Player 1" : "Player 2") << "'s turn:\n";

                cout << "Please choose your X location for your bomb: \n";
                cin >> x;
                cout << "Please choose your Y location for your bomb: \n";
                cin >> y;

                while (currentBoard[y][x] == 'x') {
                    cout << "You have already fired here, please choose again\n";
                    cout << "Please choose your X location for your bomb: \n";
                    cin >> x;
                    cout << "Please choose your Y location for your bomb: \n";
                    cin >> y;
                }

                shoot += 1;
                if (currentBoard[y][x] == 'B') {
                    currentBoard[y][x] = 'x';
                    currentCount -= 1;
                    cout << "You hit a ship! Ships remaining: " << currentCount << "\n";
                } else {
                    cout << "You missed\n";
                }

                isPlayer1Turn = !isPlayer1Turn;
                cout << "\n";
                printBothBoards(num1, num2);
                cout << "\n\n";
            }
            cout << (count1 == 0 ? "Player 2" : "Player 1") << " has successfully sunk all ships!\n";
            cout << "It took " << shoot << " shots in total.\n";
        }
    }

    return 0;
}